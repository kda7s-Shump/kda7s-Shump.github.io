from dataclasses import dataclass

import matplotlib.pyplot as plt
import torch
import browser
from PIL import Image
from torch.utils.data import Dataset
from torchvision import transforms

MEAN = [0.485, 0.456, 0.406]
STD = [0.229, 0.224, 0.225]
preprocessing = transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize(mean=MEAN, std=STD)
        ])

model = torch.hub.load('pytorch/vision:v0.6.0', 'deeplabv3_resnet101', pretrained=True)
model.eval()

@dataclass
class Img:
  width:int
  height:int

def segmentation():
  filename = "cowboy-757575_640.jpg"
  input_image = Image.open(filename)
  img = Img(input_image.size)
  input_tensor = preprocessing(input_image)
  input_batch = input_tensor.unsqueeze(0) # Create the mini-batch.

  with torch.no_grad():
      output = model(input_batch)['out'][0]
  output_predictions = output.argmax(0)

  # Create a color palette and select a color for each class
  palette = torch.tensor([2 ** 25 - 1, 2 ** 15 - 1, 2 ** 21 - 1])
  colors = torch.as_tensor([i for i in range(21)])[:, None] * palette
  colors = (colors % 255).numpy().astype("uint8")

  # Output the result
  annotated_image = Image.fromarray(output_predictions.byte().numpy(), mode="P")
  annotated_image = annotated_image.resize((img.width, img.height), Image.NEAREST)
  annotated_image.putpalette(colors)
  plt.subplot(2, 1, 1)
  plt.imshow(annotated_image)

  # Overlap the image
  trans_img = Image.new('RGBA', annotated_image.size, (0, 0, 0, 0))
  annotated_image = annotated_image.convert('RGBA')  # Convert the color palette format to RGBA

  for x in range(img.width):
    for y in range(img.height):
      # Get the pixel data
      pixel = annotated_image.getpixel((x, y))
      r, g, b, a = pixel

      if pixel[0] == 0 and pixel[1] == 0 and pixel[2] == 0:
        continue
      else:
        trans_img.putpixel((x, y), (r, g, b, 150))
  result = Image.alpha_composite(input_image.convert('RGBA'), trans_img)
  plt.subplot(2, 1, 2)
  plt.imshow(result)
  plt.show()

execute_btn = browser.document["execute"]
execute_btn.bind("click", segmentation)
